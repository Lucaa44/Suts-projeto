// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  cpf              String            @unique @default("")
  password         String
  bloodType        String            @default("Unknown")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  pendingDonations PendingDonation[] 
  donations        Donation[]        
  userBadges       UserBadge[]       
  notifications    Notification[]     // Relação com Notification (destinadas ao usuário)
}

model Hospital {
  id          Int          @id @default(autoincrement())
  cnpj        String       @unique
  name        String
  email       String       @unique
  phone       String
  address     String
  specialties String
  password    String
  vacancies   Vacancy[]
  notifications Notification[] // Relação com Notification (destinadas ao hospital)
}

model Vacancy {
  id               Int               @id @default(autoincrement())
  bloodType        String
  quantity         Int
  urgency          String
  deadline         DateTime
  description      String
  location         String
  contact          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  hospitalId       Int
  hospital         Hospital          @relation(fields: [hospitalId], references: [id])
  isClosed         Boolean           @default(false)
  pendingDonations PendingDonation[] 
  donations        Donation[]        
}

model PendingDonation {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId Int
  status    String
  createdAt DateTime @default(now())
}

model Donation {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId Int
  status    String
  createdAt DateTime @default(now())
}

model Badge {
  id          Int        @id @default(autoincrement())
  name        String
  imageUrl    String
  description String?
  criteria    Int        
  userBadges  UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  earnedAt  DateTime @default(now())
}

model Notification {
  id         Int       @id @default(autoincrement())
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  hospitalId Int?
  hospital   Hospital? @relation(fields: [hospitalId], references: [id])
  title      String
  message    String
  read       Boolean   @default(false)
  createdAt  DateTime  @default(now())
}
